//
//  UtilityFunctions.swift
//  MySampleApp
//
//  Use this file to add Utility Functions shared by the App
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.2
//

import UIKit

func prettyPrintJson(_ object: AnyObject?) -> String {
    var prettyResult: String = ""
    if object == nil {
        return ""
    } else if let resultArray = object as? [AnyObject] {
        var entries: String = ""
        for index in 0..<resultArray.count {
            if (index == 0) {
                entries = "\(resultArray[index])"
            } else {
                entries = "\(entries), \(prettyPrintJson(resultArray[index]))"
            }
        }
        prettyResult = "[\(entries)]"
    } else if object is NSDictionary  {
        let objectAsDictionary: [String: AnyObject] = object as! [String: AnyObject]
        prettyResult = "{"
        var entries: String = ""
        for (key,_) in objectAsDictionary {
            entries = "\"\(entries), \"\(key)\":\(prettyPrintJson(objectAsDictionary[key]))"
        }
        prettyResult = "{\(entries)}"
        return prettyResult
    } else if let objectAsNumber = object as? NSNumber {
        prettyResult = "\(objectAsNumber.stringValue)"
    } else if let objectAsString = object as? NSString {
        prettyResult = "\"\(objectAsString)\""
    }
    return prettyResult
}

/**
 Downloads an image asynchronously.
 
 - parameter remoteURL: The URL of the remote image.
 - parameter completion: A block of
 */
func downloadImageAsync(_ remoteURL: String, completion: (_ success: Bool, _ image: UIImage?) -> ()) {
    guard let url = URL(string: remoteURL) else {
        completion(false, nil)
        return
    }
    
    let request = NSMutableURLRequest(url: url)
    
    NSURLConnection.sendAsynchronousRequest(request as URLRequest, queue: OperationQueue.main) {
        (response: URLResponse?, data: Data?, error: NSError?) -> Void in
        
    } as! (URLResponse?, Data?, Error?) -> Void as! (URLResponse?, Data?, Error?) -> Void as! (URLResponse?, Data?, Error?) -> Void as! (URLResponse?, Data?, Error?) -> Void as! (URLResponse?, Data?, Error?) -> Void as! (URLResponse?, Data?, Error?) -> Void
}

extension UIImage {
//    convenience init(downloadURL: String) {
//        
//    }
}

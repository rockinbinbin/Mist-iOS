//
//  AppAnalyticsViewController.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.2
//

import UIKit
import AWSMobileAnalytics

class AppAnalyticsViewController: UIViewController {
    
    // MARK:- IBActions
    
    @IBAction func clickedCustomEvent(_ sender: AnyObject) {
        let eventClient = AWSMobileClient.sharedInstance.mobileAnalytics.eventClient
        let event = eventClient?.createEvent(withEventType: "DemoCustomEvent")
        event?.addAttribute("DemoAttributeValue1", forKey: "DemoAttribute1")
        event?.addAttribute("DemoAttributeValue2", forKey: "DemoAttribute2")
        event?.addMetric(Int((arc4random() % 65535)) as NSNumber, forKey: "DemoMetric")
        eventClient?.record(event)
        
        DispatchQueue.global(priority: DispatchQueue.GlobalQueuePriority.background).async(execute: {
            eventClient?.submitEvents()
        })
        
        let alertView = UIAlertController(title: NSLocalizedString("Event Submitted",
            comment: "Title bar for alert dialog about an event."),
            message: event?.prettyPrint(),
            preferredStyle: UIAlertControllerStyle.alert)
        let alertAction: UIAlertAction = UIAlertAction(title: NSLocalizedString("OK", comment: "Button on alert dialog."), style: .default, handler: nil)
        alertView.addAction(alertAction)
        present(alertView, animated: true, completion: nil)
    }
    
    @IBAction func clickedMonetizationEvent(_ sender: AnyObject) {
        
        let eventClient = AWSMobileClient.sharedInstance.mobileAnalytics.eventClient
        let eventBuilder = AWSMobileAnalyticsAppleMonetizationEventBuilder(eventClient: eventClient)
        eventBuilder?.withProductId("DEMO_PRODUCT_ID")
        eventBuilder?.withItemPrice(1.00, andPriceLocale: Locale(identifier: "en_US"))
        eventBuilder?.withQuantity(1)
        eventBuilder?.withTransactionId("DEMO_TRANSACTION_ID")
        let event = eventBuilder?.build()
        eventClient?.record(event)
        
        DispatchQueue.global(priority: DispatchQueue.GlobalQueuePriority.background).async(execute: {
            eventClient?.submitEvents()
        })
        
        let alertView = UIAlertController(title: NSLocalizedString("Event Submitted",
            comment: "Title bar for alert dialog about an event."),
            message: event?.prettyPrint(),
            preferredStyle: UIAlertControllerStyle.alert)
        let alertAction: UIAlertAction = UIAlertAction(title: NSLocalizedString("OK", comment: "Button on alert dialog."), style: .default, handler: nil)
        alertView.addAction(alertAction)
        present(alertView, animated: true, completion: nil)
    }
}

// MARK:- Utility Methods

extension AWSMobileAnalyticsEvent {
    fileprivate func prettyPrint() -> String {
        return "EVENT TYPE : \(self.eventType)\nATTRIBUTES : \(self.allAttributes())\nMETRICS : \(self.allMetrics())"
    }
}
